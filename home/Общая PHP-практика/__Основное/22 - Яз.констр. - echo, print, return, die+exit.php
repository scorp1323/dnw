<?php
ini_set('error_reporting', E_ALL);
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
// так отображаются все ошибки
//=================================================
// Языковые конструкции:
// В отличие от ф-й, можно вызывать без ()

// echo  &  print
// return
// die  & exit
// isset  & unset
// include  & include_once
// require  & require_once
// empty
// eval
// list

// echo — Выводит одну или более строк
// Выводит все аргументы. Символ конца строки не добавляется.
echo 'Тик-так';  // Тик-так
	echo '<br>';
$a = 'RAP';
echo ($a);  // RAP
	echo '<br>';
?>
<?  $foo = '500$';  ?>
У меня есть <?=$foo?>
<? /* <?=$foo?> */  // сокращенный синтаксис echo
echo '<hr>';
//=====================
//print — Выводит строку
//Главное отличие от echo в том, что print принимает только один аргумент и всегда возвращает 1.
//print("Привет мир!");

print "print() можно использовать и без скобок.";
	echo '<br>';

print "Это займет
несколько строк. Переводы строки тоже
выводятся";
		echo '<br>';

print "Это займет\nнесколько строк. Переводы строки тоже\nвыводятся";
		echo '<br>';

print "Экранирование символов делается \"Так\".";
		echo '<br>';


// с print можно использовать переменные
$foo = "foobar";
$bar = "barbaz";
print "foo - это $foo"; // foo - это foobar
		echo '<br>';


// ... и массивы
$bar = array("value" => "foo");
print "это {$bar['value']} !"; // это foo !
		echo '<br>';

// При использовании одинарные кавычек выводится имя переменной, а не значение
print 'foo - это $foo'; // foo - это $foo
		echo '<br>';

// Если вы не используете другие символы, можно вывести просто значения переменных
print $foo;          // foobar
	echo '<br>';

$variable = 0;
print <<<END
Здесь используется синтаксис "here document" для вывода
нескольких строк с подстановкой переменных $variable.
Заметьте, что закрывающий идентификатор должен
располагаться в отдельной строке, никаких пробелов и ;!!!
END
;// сука, слово END в конце должно быть без ничего, даже без ";"  !!!
echo '<hr>';
//===================================
// return возвращает управление программой модулю, из которого была вызвана функция. Выполнение программы продолжается с инструкции, следующей за местом вызова.
// Если вызывается из функции, выражение return немедленно прекращает выполнение текущей функции и возвращает свой аргумент как значение данной функции. return также завершит выполнение выражения eval() или всего файла скрипта
//=====================================
//die — Эквивалент функции exit
//exit — Вывести сообщение и прекратить выполнение текущего скрипта
$filename = 'porodu_sobak.txt';
$file = fopen($filename, 'r')
    or exit("Невозможно открыть файл ($filename)");

//обычный выход из программы
exit;
exit();
exit(0);

//выход с кодом ошибки
exit(1);
exit(0376); //восьмеричный